Pages in Website (Kiosk):
1. WELCOME SCREEN
    - No logic required, only a button that says click to start and leads to the SERVICE MENU page (2)
2. SERVICE MENU
    - Has four buttons (CHECK STATUS (3), REQUEST DOCUMENT (4), MULTIPLE DOCUMENT REQUEST (5), PRIORITY LANE (6))
3. CHECK STATUS
    - Has two buttons for choosing system for checking status (REQUEST NUMBER (3a) and STUDENT DETAILS (3b))
      a. REQUEST NUMBER
        - Has an input field for the given request number
      b. STUDENT DETAILS
        - Has three input fields (First Name, Last Name, Student Number)
    - Has a button for checking status which leads to REQUEST DETAILS (3c)
      c. REQUEST DETAILS
        - Displays requester details if applicable otherwise will show n/a (Name, Student Number, Request Number,
        Date Requested)
        - Displays details on the requested documents and the total amount to be paid
        - Displays status of the document (which will be manually updated by admin users)
        - Depending on the status, the next step portion will display different information
        - Has a button to check another request which leads back to CHECK STATUS (3)
        - Has a button that says done which leads back to SERVICE MENU (2)
    - Has a button for going back to SERVICE MENU (2)
4. REQUEST DOCUMENT
    - A form that has several inputs (First Name, Last Name, Middle Name, Student ID, Email Address, Phone Number)
    - Dropdown for document type
    - Dropdown for purpose of document request
    - Counter for number of copies (Minimum 1, Maximum (?))
    - Text Field for Additional Notes
    - Submit request button
    - If there are no errors, the submit button leads to and displays REQUEST SUBMIT SUCCESSFUL (4a) for a few seconds
      and leads to DOCUMENT REQUEST RECEIPT (4b)
      a. REQUEST SUBMIT SUCCESSFUL
        - No logic required except for timing
      b. DOCUMENT REQUEST RECEIPT
        - Displays relevant information (Request Number, Date, Requester's Name, Requested Documents and Copy Count,
          and Processing Time)
        - Has button for Printing Receipt (Applicable only for Kiosk) and returning to menu which leads back to
          SERVICE MENU (2)
    - Has a button for going back to SERVICE MENU (2)
5. MULTIPLE DOCUMENT REQUEST
    - Has input fields (First Name, Middle Name, Last Name, Student ID, Phone Number, Email)
    - Continue button which leads to MULTI-DOCUMENT REQUEST CONT. (5a)
      a. MULTI-DOCUMENT REQUEST CONT.
        - Button for adding document (Has dropdowns for Document Type, Purpose, and Copy Count)
        - Button for submitting request which leads to and displays MULTI-DOCUMENT REQUEST SUBMITTED (5b) for a few
          seconds before leading to MULTI-DOCUMENT REQUEST RECEIPT (5c)
        - Button for leading back to MULTIPLE DOCUMENT REQUEST (5)
      b. MULTI-DOCUMENT REQUEST SUBMITTED
        - No logic required except for timing
      c. MULTI-DOCUMENT REQUEST RECEIPT
        - Displays requester details if applicable otherwise will show n/a (Request Number, Date, Requester's Name)
        - Displays request details (Documents Requested with Copy Count and Purpose)
        - Displays processing time
        - Has a button for printing receipt (Applicable only for Kiosk) and returning to menu which leads back to
          SERVICE MENU (2)
6. PRIORITY LANE [--SUBJECT TO CHANGE--]
    - Has buttons for priority categories (Currently: Pregnant, PWD, Senior Citizen), selecting a category will lead
      to PRIORITY LANE DOCUMENT

Django Apps (Kiosk):
1. Requests
    - Handles requests made by users, status history, etc.
    Models:
        - DocumentRequest
        - RequestedDocument
        - RequestStatusHistory
2. Users (Used in both Kiosk and Admin sides)
    - Handles user-relevant information and history (For admins, new students, alumni, and non-students)
    Models:
        - Requester
        - Admin
3. Payments
    - Handles payments, payment history, and other business logic
    Models:
        - Payment
        - PaymentHistory
4. Notifications
    - Handles notification functions (Email and SMS)
    Models:
        - Email
        - SMS
5. DocCatalog
    - Handles information regarding document types available
    Models:
        - DocumentType
6. KioskApi
    - Handles separation of concerns between applications and the general flow of the kiosk system

Pages in Website (Admin):
1. DASHBOARD
2. REQUEST MANAGEMENT
3. PAYMENT TRACKING
4. NOTIFICATIONS
5. USER MANAGEMENT
6. REPORTS AND LOGS

Django Apps (Admin):

Database Schema (fast_track_db):
CREATE TABLE users (
    user_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    priority_id INTEGER,
    first_name VARCHAR(35) NOT NULL,
    middle_name VARCHAR(35),
    last_name VARCHAR(35),
    student_number VARCHAR(15),
    email_address VARCHAR(50) UNIQUE,
    mobile_number VARCHAR(20),
    password VARCHAR(255),
    user_type ENUM('admin', 'staff', 'requester') DEFAULT 'requester',
    is_enabled BOOLEAN DEFAULT TRUE,
    last_login DATETIME,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    update_at DATETIME ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (priority_id) REFERENCES priority_categories(priority_id)
);

CREATE TABLE roles (
    role_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(15) NOT NULL,

);

CREATE TABLE document_types (
    doctype_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50) NOT NULL,
    description VARCHAR(100),
    price DECIMAL(10,2) DEFAULT 0.00,
    processing_time VARCHAR(30),
    is_enabled BOOLEAN DEFAULT TRUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE requests (
    request_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    user_id INTEGER NOT NULL,
    doctype_id INTEGER NOT NULL,
    status ENUM('requested', 'processing', 'released', 'received') DEFAULT 'requested',
    purpose ENUM(<add purposes here>) [--SUBJECT TO CHANGE--],
    copy_amount INTEGER DEFAULT 1 CHECK (copy_amount > 0),
    total_price DECIMAL(10,2),
    notes TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME ON UPDATE CURRENT_TIMESTAMP,
    released_at DATETIME,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (doctype_id) REFERENCES document_types(doctype_id)
);

CREATE TABLE priority_categories (
    priority_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    priority_level INTEGER NOT NULL,
    category VARCHAR(30)
);

CREATE TABLE payments (
    payment_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    request_id INTEGER NOT NULL,
    amount DECIMAL(10,2),
    method ENUM(<add payment methods here>),
    status ENUM('pending', 'paid', 'failed') DEFAULT 'pending',
    reference_no VARCHAR(50),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (request_id) REFERENCES requests(request_id)
);

Considerations for the System:
- Asides from hosting costs, the university will also need to have people on standby for maintenance which means we'll
have to create a cohesive guide both for the admin users and other developers that will be in charge of system
maintenance.
- Make sure to soft-delete logging history only, not hard-delete.

Questions for Development:
- What are the different type of users and what are the differences between each of them?
- What are the payment methods accepted by AUF Accounting?
- What are the different purposes for document requesting? Are there ever any special cases/purposes where the purpose
might require an "others" field?