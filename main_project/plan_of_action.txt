Pages in Website (Kiosk):
1. WELCOME SCREEN
    - No logic required, only a button that says click to start and leads to the SERVICE MENU page (2)
2. SERVICE MENU
    - Has four buttons (CHECK STATUS (3), REQUEST DOCUMENT (4), MULTIPLE DOCUMENT REQUEST (5), PRIORITY LANE (6))
3. CHECK STATUS
    - Has two buttons for choosing system for checking status (REQUEST NUMBER (3a) and STUDENT DETAILS (3b))
      a. REQUEST NUMBER
        - Has an input field for the given request number
      b. STUDENT DETAILS
        - Has three input fields (First Name, Last Name, Student Number)
    - Has a button for checking status which leads to REQUEST DETAILS (3c)
      c. REQUEST DETAILS
        - Displays requester details if applicable otherwise will show n/a (Name, Student Number, Request Number,
        Date Requested)
        - Displays details on the requested documents and the total amount to be paid
        - Displays status of the document (which will be manually updated by admin users)
        - Depending on the status, the next step portion will display different information
        - Has a button to check another request which leads back to CHECK STATUS (3)
        - Has a button that says done which leads back to SERVICE MENU (2)
    - Has a button for going back to SERVICE MENU (2)
4. REQUEST DOCUMENT
    - A form that has several inputs (First Name, Last Name, Middle Name, Student ID, Email Address, Phone Number)
    - Dropdown for document type
    - Dropdown for purpose of document request
    - Counter for number of copies (Minimum 1, Maximum (?))
    - Text Field for Additional Notes
    - Submit request button
    - If there are no errors, the submit button leads to and displays REQUEST SUBMIT SUCCESSFUL (4a) for a few seconds and leads to DOCUMENT REQUEST RECEIPT (4b)
      a. REQUEST SUBMIT SUCCESSFUL
        - No logic required except for timing
      b. DOCUMENT REQUEST RECEIPT
        - Displays relevant information (Request Number, Date, Requester's Name, Requested Documents and Copy Count, and Processing Time)
        - Has button for Printing Receipt (Applicable only for Kiosk) and returning to menu which leads back to SERVICE MENU (2)
    - Has a button for going back to SERVICE MENU (2)
5. MULTIPLE DOCUMENT REQUEST
    - Has input fields (First Name, Middle Name, Last Name, Student ID, Phone Number, Email)
    - Continue button which leads to MULTI-DOCUMENT REQUEST CONT. (5a)
      a. MULTI-DOCUMENT REQUEST CONT.
        - Button for adding document (Has dropdowns for Document Type, Purpose, and Copy Count)
        - Button for submitting request which leads to and displays MULTI-DOCUMENT REQUEST SUBMITTED (5b) for a few
          seconds before leading to MULTI-DOCUMENT REQUEST RECEIPT (5c)
        - Button for leading back to MULTIPLE DOCUMENT REQUEST (5)
      b. MULTI-DOCUMENT REQUEST SUBMITTED
        - No logic required except for timing
      c. MULTI-DOCUMENT REQUEST RECEIPT
        - Displays requester details if applicable otherwise will show n/a (Request Number, Date, Requester's Name)
        - Displays request details (Documents Requested with Copy Count and Purpose)
        - Displays processing time
        - Has a button for printing receipt (Applicable only for Kiosk) and returning to menu which leads back to SERVICE MENU (2)
6. PRIORITY LANE [--SUBJECT TO CHANGE--]
    - Has buttons for priority categories (Currently: Pregnant, PWD, Senior Citizen), selecting a category will lead to PRIORITY LANE DOCUMENT

Django Apps (Kiosk):
1. Requests
    - Handles requests made by users, status history, etc.
    Models:
        - Request
        - RequestedDocuments
        - RequestHistory
        - RequestStatus
        - RequestPurpose
2. Users (Used in both Kiosk and Admin sides)
    - Handles user-relevant information and history (For admins, new students, alumni, and non-students)
    Models:
        - User
        - Role
        - RoleStatus
        - PriorityCategory
3. Payments
    - Handles payments, payment history, and other business logic
    Models:
        - Payment
        - PaymentMethod
4. Notifications
    - Handles notification functions (Email and SMS)
    Models:
        - Notification
5. DocCatalog
    - Handles information regarding document types available
    Models:
        - DocumentType
6. KioskApi
    - Handles separation of concerns between applications and the general flow of the kiosk system

Pages in Website (Admin):
1. DASHBOARD
    - Initial landing page when entering admin dashboard
    - Has a count of total requests, pending requests, completed requests, and active users
    - Displays statistics of weekly request volumes and document type distribution
    - Displays the three latest requests made in the system
    - Displays warnings about requests and payments (And other system warnings)
    - Has a side panel with buttons that lead to REQUEST MANAGEMENT (2), PAYMENT TRACKING (3), NOTIFICATIONS (4), USER MANAGEMENT (5), and REPORTS AND LOGS (6)
    -
2. REQUEST MANAGEMENT
3. PAYMENT TRACKING
4. NOTIFICATIONS
5. USER MANAGEMENT
6. REPORTS AND LOGS

Django Apps (Admin):

Database Schema (fast_track_db):
CREATE TABLE users (
    user_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    role_id INTEGER NOT NULL,
    priority_id INTEGER, -- Nullable because some users don't have priority privilege
    status_id INTEGER, -- Nullable because this only applies for non-requester users
    first_name VARCHAR(35) NOT NULL,
    middle_name VARCHAR(35),
    last_name VARCHAR(35), -- Nullable because some foreign students might not use last names
    student_number VARCHAR(15), -- Nullable because not all users have student numbers (Like admins, alumni, etc.)
    email_address VARCHAR(50) UNIQUE, -- Nullable because not all users have emails
    mobile_number VARCHAR(20), -- Nullable because not all users have mobile numbers
    password VARCHAR(255),
    last_login DATETIME,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (role_id) REFERENCES roles(role_id),
    FOREIGN KEY (priority_id) REFERENCES priority_categories(priority_id),
    FOREIGN KEY (status_id) REFERENCES role_statuses(status_id)
);

CREATE TABLE roles (
    role_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(15) NOT NULL, --roles include: admin, registrar, accounting, and requester
    description VARCHAR(50)
);

CREATE TABLE role_statuses (
    status_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    description VARCHAR(30) --statuses include: active, inactive, deleted
);

CREATE TABLE document_types (
    doctype_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50) NOT NULL, --document types include: Transcript of Records, Transfer Credentials, Certification of Enrollment, GWA, Medium of Instruction, Grades
    description VARCHAR(100),
    price DECIMAL(10,2) DEFAULT 0.00,
    processing_time VARCHAR(30),
    is_enabled BOOLEAN DEFAULT TRUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE requests (
    request_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    user_id INTEGER NOT NULL,
    purpose_id INTEGER NOT NULL,
    status_id INTEGER NOT NULL,
    copy_amount INTEGER DEFAULT 1 CHECK (copy_amount > 0),
    notes TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    released_at DATETIME,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (purpose_id) REFERENCES request_purposes(purpose_id),
    FOREIGN KEY (status_id) REFERENCES request_statuses(status_id)
);

CREATE TABLE request_purposes (
    purpose_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    description VARCHAR(30) -- includes: 'reference', 'further studies', 'board exam', 'evaluation', 'others'
);

CREATE TABLE request_statuses (
    status_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    description VARCHAR(30) -- includes: 'requested', 'processing', 'released', 'received'
);

CREATE TABLE requested_documents (
    reqdoc_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    request_id INTEGER NOT NULL,
    doctype_id INTEGER NOT NULL,
    copy_amount INTEGER DEFAULT 1 CHECK (copy_amount > 0),
    FOREIGN KEY (request_id) REFERENCES requests(request_id) ON DELETE CASCADE,
    FOREIGN KEY (doctype_id) REFERENCES document_types(doctype_id)
);

CREATE TABLE request_history (
    history_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    request_id INTEGER NOT NULL,
    status_id INTEGER NOT NULL,
    user_id INTEGER, -- The admin/staff who commits the change
    remarks TEXT,
    changed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (request_id) REFERENCES requests(request_id) ON DELETE CASCADE,
    FOREIGN KEY (status_id) REFERENCES request_statuses(status_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE priority_categories (
    priority_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    priority_level INTEGER NOT NULL,
    category VARCHAR(30)
);

CREATE TABLE payments (
    payment_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    request_id INTEGER NOT NULL,
    method_id INTEGER NOT NULL,
    verified_by INTEGER,
    amount DECIMAL(10,2),
    status ENUM('pending', 'paid', 'failed') DEFAULT 'pending',
    reference_no VARCHAR(50),
    verified_at DATETIME
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (request_id) REFERENCES requests(request_id),
    FOREIGN KEY (method_id) REFERENCES payment_methods(method_id),
    FOREIGN KEY (verified_by) REFERENCES users(user_id)
);

CREATE TABLE payment_methods (
    method_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(30) NOT NULL, -- includes: 'cash', 'check', 'bdo online', 'bdo otc', 'metrobank online', 'metrobank otc'
    description VARCHAR(50)
);

CREATE TABLE notifications (
    notif_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    user_id INTEGER NOT NULL,
    message TEXT NOT NULL,
    type ENUM('email', 'sms'), -- Might be useful to add system type notifications as well
    reference_table VARCHAR(50),
    reference_id INTEGER,
    status ENUM('pending', 'sent', 'failed') DEFAULT 'pending',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    sent_at DATETIME,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

Considerations for the System:
- Asides from hosting costs, the university will also need to have people on standby for maintenance which means we'll have to create a cohesive guide both for the admin users and other developers that will be in charge of system maintenance. With this in mind, the system can remain future-proof even when, we, the original developers aren't around anymore.
- Make sure to soft-delete any information and archive it in the database, not hard-delete.
- NOTE: For document types, price and expected processing time currently have placeholder values (100.0 and 3-5 working days)

Questions for Development:
- What are the different type of users and what are the differences between each of them? Are there any other university staff that might make use of this system? (Listed user types include: Administrator - In charge of overseeing the management and able to access all information, Registrar Staff - Able to access all information related to managing requests, notifications, document types, etc., Accounting (If applicable) - Able to access payment related-information, Requester - Users that request documents (encompasses current students, alumni, non-students))
- Are there ever any special cases where the document request purpose might require an "others" field?
- Does this list cover all the documents that can be requested from the University Registrar? (Listed documents include: Transcript of Records, Transfer Credentials, Certification of Enrollment, GWA, Medium of Instruction, Grades)
- What is the price and expected processing time of each document type?